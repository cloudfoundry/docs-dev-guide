---
title: Configuring per-route options
owner: CF for VMs Networking
---

By default, communication between Gorouter and backends is configured through the general settings at the platform level.

This topic describes how to specify per-route Gorouter options scoped at the application level.
This greater granularity lets developers tailor optimal routing behavior for applications' unique load profiles or other requirements.

Gorouter supports the following per-route option, described in the section below:

- `loadbalancing`: Configures the load balancing algorithm used by Gorouter for this particular route. <%= vars.per_route_lb_version %>
   - Settings: `round-robin`, `least-connection`.

## <a id="loadbalancing"></a> Configure Gorouter's Load Balancing Algorithm

<%= vars.per_route_lb_version %>

The per-route option `loadbalancing` allows configuring the load balancing algorithm, which defines how the load is distributed between Gorouters and backends.

This option supports two settings for load balancing:

- `round-robin` distributes the load evenly across all available backends
- `least-connection` directs traffic to the backend with the fewest active connections at any given time, optimizing resource utilization


### <a id="lb-set-manifest"></a> Configure Load Balancing in an App Manifest

To configure per-route load balancing for an application that has not yet been pushed:

1. In the application manifest, include a `route` definition with an `options: loadbalancing` attribute set to `round-robin` or `least-connection`. For example:

   	```yaml
   	---
   	applications:
   	- name: MY-APP
   	  routes:
   	    - route: MY-APP.EXAMPLE.COM
           options:
             loadbalancing: least-connection
   	```

    Where `MY-APP` is the name of your app and `MY-APP.EXAMPLE.COM` is the route you want to map to your app.

1. Push the app with the manifest:

    ```
    cf push -f manifest.yml
    ```

2. To verify the setting, you can query the route using the cli route command:
    ```
    cf route EXAMPLE.COM --hostname MY-APP
    ```
   The response lists the chosen `loadbalancing` algorithm option:
    ```
    options:    {loadbalancing=least-connection}
    ```
   Alternatively, you can query the `routes` API endpoint for the app's route:

    ```
    cf curl /v3/routes/?hosts=MY-APP
    ```

    Where `MY-APP` is the host attribute of the route. The response lists the chosen `loadbalancing` algorithm setting:


    ```
       "options": {
         "loadbalancing": "least-connection"
       }
    ```

### <a id="lb-update-curl"></a> Change Load Balancing of an Existing App

To change the per-route `loadbalancing` setting of an app that has already been pushed, you can use the cli command, `update-route`. 

For example, to change an app route's algorithm from `least-connection` to `round-robin`:

1. Run the update-route command:
    ```
    cf update-route MY-APP.EXAMPLE.COM --option=loadbalancing=round-robin
    ```
2. To verify the setting, you can query the route using the cli route command:
    ```
    cf route MY-APP.EXAMPLE.COM
    ```

   The response lists the changed `loadbalancing` algorithm option:
    ```
    options: { loadbalancing: round-robin }
    ```

   Alternatively, it is also possible to `cf curl` the `/v3/routes` API.
1. Run the `PATCH` request to the targeted API endpoint:

    ```
    cf curl /v3/routes/GUID -X PATCH -H "Content-type: application/json" \
      -d '{
        "options": {
          "loadbalancing": "round-robin"
        }
      }'
    ```

    Where `GUID` is the unique identifier for the route.

2. To confirm the setting, query the `routes` API endpoint for the route:

    ```
    cf curl /v3/routes/GUID
    ```

    Where `GUID` is the unique identifier for the route. 

   The response lists the new `round-robin` setting:

   ```
   "options": {
     "loadbalancing": "round-robin"
   }
   ```

### <a id="lb-update-curl"></a> Creating a Route with a specified Load Balancing Algorithm
To create a route with the per-route `loadbalancing` option, you can use the cli command `create-route`. 
For example:

1. Run the create-route command:
    ```
    cf create-route MY-APP.EXAMPLE.COM --option=loadbalancing=round-robin
    ```
2. To verify the setting, you can query the route using the cli route command:
    ```
    cf route MY-APP.EXAMPLE.COM
    ```

   The response lists the changed `loadbalancing` algorithm option:
    ```
    options: { loadbalancing: round-robin }
    ```

### <a id="lb-update-curl"></a> Mapping a New Route to an Existing App with a specified Load Balancing Algorithm

To map a new route with the per-route `loadbalancing` option, you can use the cli command `map-route`. 
If the route does not exist, it will be created with the specified load-balancing option. 
If the route does exist, the cli command `update-route` should be used as described before.

For example:

1. Run a map-route command:
    ```
    cf map-route MY-APP MY-APP.EXAMPLE.COM --option=loadbalancing=round-robin
    ```
2. To verify the setting, you can query the route using the cli route command:
    ```
    cf route MY-APP.EXAMPLE.COM
    ```

   The response lists the changed `loadbalancing` algorithm option:
    ```
    options: { loadbalancing: round-robin }
    ```
