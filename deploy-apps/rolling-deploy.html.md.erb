---
title: Configuring rolling app deployments
owner: CAPI
---

You can use Cloud Foundry Command Line Interface (cf CLI) commands
or the Cloud Foundry API (CAPI) to push your apps to <%= vars.app_runtime_first %> using a rolling deployment.

For information about the traditional method for addressing app downtime while pushing app updates,
see [Using blue-green deployment to reduce downtime and risk](./blue-green.html).

For more information about CAPI, see the
[Cloud Foundry API (CAPI) documentation](https://v3-apidocs.cloudfoundry.org/).


## <a id="prerequisites"></a> Prerequisites

The procedures in this topic require one of the following:

* **cf CLI v7 or later**

* **CAPI V3:** If you use CAPI V3, you must install the cf CLI.


## <a id="commands"></a> Commands

This section describes the commands for working with rolling app deployments.

### <a id="deploy"></a> Deploy an app

To deploy an app without incurring downtime:

<p class="note caution">
<span class="note__title"><strong>Caution</strong></span>
Review the limitations of this feature before running the command. For more information, see
<a href="#limitations">Limitations</a>.</p>

* **For cf CLI v7+, run:**

    ```
    cf push APP-NAME --strategy rolling
    ```
    Where `APP-NAME` is the name that you want to give your app.

    <p class="note">
    <span class="note__title"><strong>Note</strong></span>
    cf CLI v7 exits when one instance of each process is healthy.
    It also includes a <code>--no-wait</code> flag on push for users who don't want to wait
    for the operation to complete.
    <code>cf push</code> used with the <code>--no-wait</code> flag exits as soon as one instance is healthy.
    </p>

    If the deployment stops and doesn't restart, cancel it and run it again as described in an earlier step.
    To cancel, see [Cancel a deployment](#cancel).


* **For cf CLI v8.8.0+ and CAPI V3.173.0 or later**
    Allows you to additionally specify the `--max-in-flight` property, run:
    ```
    cf push APP-NAME --strategy rolling --max-in-flight MAX_IN_FLIGHT
    ```
    Where `APP-NAME` is the name that you want to give your app.
    Where `MAX_IN_FLIGHT` specifies the maximum number of new instances to start up simultaneous until the deployment is complete. Optional and defaults to 1.

* **For CAPI V3:**
    1. Log in to the cf CLI.

        ```
        cf login
        ```
    2. Create an empty app by running the following `curl` command  with `POST /v3/apps`. Record the
    app GUID from the output.

        ```
        cf curl /v3/apps \
          -X POST \
          -H "Content-type: application/json" \
          -d '{
            "name": "APP-NAME",
            "relationships": {
              "space": {
                "data": {
                  "guid": "SPACE-GUID"
                }
              }
            }
          }'
        ```

        Where:
        <ul>
          <li><code>APP-NAME</code> is the name that you want to give your app.</li>
          <li><code>SPACE-GUID</code> is the space identifier that you want to associate with your app.</li>
        </ul>
    3. Create a package with the following `curl` command with `POST /v3/packages`. Record the package
    GUID from the output.

        ```
        cf curl /v3/packages \
          -X POST \
          -H "Content-type: application/json" \
          -d '{
            "type": "bits",
            "relationships": {
              "app": {
                "data": {
                  "guid": "APP-GUID"
                }
              }
            }
          }'
        ```
        Where `APP-GUID` is the app GUID that you recorded in an earlier step. This app GUID is a
        unique identifier for your app.
    4. Upload the package bits by running the following `curl` command with
    `POST /v3/packages/PACKAGE-GUID/upload`.

        ```
        cf curl /v3/packages/PACKAGE-GUID/upload \
        -X POST \
        -F bits=@"PACKAGED-APP" \
        ```

        Where:
        <ul>
          <li><code>PACKAGE-GUID</code> is the package GUID that you recorded in an earlier step.</li>
          <li><code>PACKAGED-APP</code> is your app packaged in a file such as <code>.zip</code>.</li>
        </ul>
    5. Create the build by running the following `curl` command with `POST /v3/builds`. Record the
    droplet GUID from the output.

        ```
        cf curl /v3/builds \
          -X POST \
          -H "Content-type: application/json" \
          -d '{
            "package": {
               "guid": PACKAGE-GUID"
            }
          }'
        ```
        Where `PACKAGE-GUID` is the package GUID that you recorded in an earlier step.
    6. Deploy your app by running the following `curl` command with `POST /v3/deployments`. To verify
    the status of the deployment or take action on the deployment, record the deployment GUID from the
    output.

        ```
        cf curl /v3/deployments \
        -X POST \
        -H "Content-type: application/json" \
        -d '{
          "droplet": {
            "guid": "DROPLET-GUID"
          },
          "strategy": "rolling",
          "options": {
            "max_in_flight": MAX_IN_FLIGHT
          },
          "relationships": {
            "app": {
              "data": {
                "guid": "APP-GUID"
              }
            }
          }
        }'
        ```
        Where `DROPLET-GUID` and `APP-GUID` are the GUIDs that you recorded in earlier steps.
        Where `MAX_IN_FLIGHT` is an integer that specifies the maximum number of new instances to start up simultaneous until the deployment is complete. Optional and defaults to 1.

For more information about this command, see [How it works](#how-it-works).

### <a id="cancel"></a> Cancel a deployment

To stop the deployment of an app that you pushed:

* **For cf CLI v7+, run:**

    ```
    cf cancel-deployment APP-NAME
    ```
    Where `APP-NAME` is the name of the app.

* **For CAPI V3, run:**

    ```
    cf curl /v3/deployments/DEPLOYMENT-GUID/actions/cancel" -X POST
    ```
    Where `DEPLOYMENT-GUID` is the GUID of the deployment that you recorded after following the
    CAPI procedure in [Deploy an app](#deploy).

This reverts the app to its state from before the deployment started by:

* Scaling up the original web process
* Removing any deployment artifacts
* Resetting the `current_droplet` on the app

<p class="note">
<span class="note__title"><strong>Note</strong></span>
The cancel command is designed to revert the app to its
original state as quickly as possible and does not guarantee zero downtime. Additionally, changes
to environment variables and service bindings will not be reverted. </p>

### <a id="restart"></a> Restart an app

To restart your app without downtime, run the appropriate command. Restart an app to apply
configuration updates that require a restart, such as environment variables or service bindings.

* **For cf CLI v7+, run:**

    ```
    cf restart APP-NAME --strategy rolling
    ```
    Where `APP-NAME` is the name of the app.

* **For cf CLI v8.8.0+ and CAPI V3.173.0 or later**
    Allows you to additionally specify the `--max-in-flight` property, run:
    ```
    cf restart APP-NAME --strategy rolling --max-in-flight MAX_IN_FLIGHT
    ```
    Where `APP-NAME` is the name of the app.
    Where `MAX_IN_FLIGHT` specifies the maximum number of new instances to restart simultaneous until the deployment is complete. Optional and defaults to 1.

* **For CAPI V3, run:**

    ```
    cf curl /v3/deployments \
    -X POST \
    -H "Content-type: application/json" \
    -d '{
      "droplet": {
        "guid": "DROPLET-GUID"
      },
      "strategy": "rolling",
      "options": {
        "max_in_flight": MAX_IN_FLIGHT
      },
      "relationships": {
        "app": {
          "data": {
            "guid": "APP-GUID"
          }
        }
      }
    }'
    ```
    Where `DROPLET-GUID` and `APP-GUID` are the GUIDs that you recorded in earlier steps.
    Where `MAX_IN_FLIGHT` is an integer that specifies the maximum number of new instances to start up simultaneous until the deployment is complete. Optional and defaults to 1.

## <a id="how-it-works"></a> How it works

This section describes the rolling deployments and their limitations.

### <a id="deployment-process"></a> Rolling deployment

This section describes pushing an app with a rolling deployment strategy.

1. The `cf push APP-NAME --strategy rolling` command:
  1. Stages the updated app package.
  2. Creates a droplet with the updated app package.
  3. Creates a deployment with the new droplet and any new configuration.
      * This starts up to `max_in_flight` processes that shares the route with the old process.
      * Now, if you run `cf app` on your app, you see multiple `web` processes.
    <br>
    For more information about the deployment object, see the [Deployments](http://v3-apidocs.cloudfoundry.org/index.html#deployments) section of the CAPI V3 documentation.

2. After the command creates the deployment, the `cc_deployment_updater` BOSH job runs in the
background, updating deployments as follows:
    1. Adds up to `max_in_flight` instances of the new web process and removes instances from the old web process. This step repeats until the new web process reaches the required number of instances.
        <p class="note important">
        <span class="note__title"><strong>Important</strong></span>
        This happens only if all instances of the new web process are running.</p>
    2. Removes the old web process. The new web process now fully replaces the old web process.
    3. Restarts all non-web processes of the app.
    4. Sets the deployment to `DEPLOYED`.

### <a id="limitations"></a> Limitations

The following table describes the limitations of when using rolling deployments.

<table class="table">
  <thead><tr>
    <th>Limitation</th>
    <th>Description</th>
  </tr></thead>
  <tr>
    <td>Multiple app versions</td>
    <td>During a deployment, <%= vars.app_runtime_abbr %> serves both the old and new version of your app at the
    same route. This can lead to user issues if you push backwards-incompatible API changes.</td>
  </tr>
  <tr>
    <td>Database migrations</td>
    <td>Deployments do not handle database migrations. Migrating an app database when the existing
    app is not compatible with the migration can result in downtime.</td>
  </tr>
  <tr>
    <td>Non-web processes</td>
    <td>Rolling deployments only run web processes through the rolling update sequence described
    earlier. The commands restart worker and other non-web processes in bulk after updating all web
    processes.<br><br>
		The CAPI V3 API introduces the concept of processes as runnable units of an app. Each app has a
    web process by default. You can specify additional processes with a Procfile, and in some cases
    buildpacks create additional processes. For more information about processes, see
    <a href="http://v3-apidocs.cloudfoundry.org/index.html#processes">Processes</a> in the CAPI V3
    documentation.</td>
  </tr>
  <tr>
    <td>Quotas</td>
    <td>Pushing updates to your app using a deployment strategy creates up to `max_in_flight` new instances (defaults to 1).
    If you lack sufficient quota, the deployment fails. Administrators might need to increase quotas to accommodate deployments.</td>
  </tr>
  <tr>
    <td>Simultaneous apps when interrupting a push</td>
    <td>If you push app before your previous push command for the same app has completed, your
    first push gets interrupted. Until the last deployment completes, there might be many versions
    of the app running at the same time. Eventually, the app runs the code from your most recent
    push.</td>
  </tr>
  <tr>
    <td>V3 APIs</td>
    <td>During a rolling deploy for an app, requests to the V3 APIs for scaling or updating a process fail with an error message
    like <code>Cannot scale this process while a deployment is in flight.</code>. For more information, see <a href="https://v3-apidocs.cloudfoundry.org/version/3.109.0/index.html#scale-a-process">Scale a process</a>
    or <a href="https://v3-apidocs.cloudfoundry.org/version/3.109.0/index.html#update-a-process">Update a process</a> in the CAPI V3 documentation.</td>
  </tr>
  <tr>
    <td>New or stopped applications</td>
    <td>
      When pushing an application for the first time, or if the app is stopped, no deployment strategy is used and all application instances are started immediately.
    </td>
  </tr>
</table>


## <a id="status"></a> View the status of rolling deployments

You can use CAPI to view the status of rolling deployments.

To view the status of a rolling deployment:

1. Log in to the cf CLI:

    ```
    cf login
    ```

1. Find the GUID of your app by running:

    ```
    cf app APP-NAME --guid
    ```
    Where `APP-NAME` is the name of the app.

1. Find the deployment for that app by running:

    ```
    cf curl GET /v3/deployments?app_guids=APP-GUID&status_values=ACTIVE
    ```
    Where `APP-GUID` is the GUID of the app. Deployments are listed in chronological order, with
    the latest deployment displayed as the last in a list.

1. Run:

    ```
    cf curl GET /v3/deployments/DEPLOYMENT-GUID
    ```
    Where `DEPLOYMENT-GUID` is the GUID of the rolling deployment.

`cf curl GET /v3/deployments/DEPLOYMENT-GUID` returns these status properties for rolling deployments:

* `status.value`: Indicates if the deployment is `ACTIVE` or `FINALIZED`.

* `status.reason`: Provides detail about the deployment status.

* `status.details`: Provides the timestamp for the most recent successful health check.
  The value of the `status.details` property can be `nil` with no successful health check
  for the deployment. For example, there might be no successful health check if the deployment was
  cancelled.

The following table describes the possible values for the `status.value` and `status.reason`
properties:

<table class="table">
  <thead><th width="20%"><code>status.value</code></th>
  <th width="20%"><code>status.reason</code></th>
  <th width="60%">Description</th></thead>
  <tr>
    <td><code>ACTIVE</code></td>
    <td><code>DEPLOYING</code></td>
    <td>The deployment is deploying.</td>
  </tr>
  <tr>
    <td><code>ACTIVE</code></td>
    <td><code>CANCELLING</code></td>
    <td>The deployment is cancelling.</td>
  </tr>
  <tr>
    <td><code>FINALIZED</code></td>
    <td><code>DEPLOYED</code></td>
    <td>The deployment was deployed.</td>
  </tr>
  <tr>
    <td><code>FINALIZED</code></td>
    <td><code>CANCELLED</code></td>
    <td>The deployment was cancelled.</td>
  </tr>
  <tr>
    <td><code>FINALIZED</code></td>
    <td><code>SUPERSEDED</code></td>
    <td>The deployment was stopped and did not finish deploying because there was another
    deployment created for the app.
    </td>
  </tr>
</table>
