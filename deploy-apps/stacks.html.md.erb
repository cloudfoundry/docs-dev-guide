---
title: Changing stacks
owner:
  - Buildpacks & Stacks
  - Diego
  - Runtime OG
---



You can restage apps on a new stack. Here you will find a description of stacks and lists of stacks that are supported on <%= vars.current_major_version ?  "#{vars.app_runtime_full} v#{vars.current_major_version}" : vars.app_runtime_full %>.

To restage a Windows app on a new Windows stack, see [Changing Windows Stacks](./windows-stacks.html).

<% if vars.platform_code == "CF" || vars.platform_code == "PCF" %>
You can also use the Stack Auditor plugin for the Cloud Foundry Command Line Interface (cf CLI) when changing stacks. See [Using the Stack Auditor Plugin](../../adminguide/stack-auditor.html).
<% else %>
<% end %>

## <a id='overview'></a> Overview

A stack is a prebuilt root file system (rootfs) that supports a specific operating system. For example, Linux-based systems need `/usr` and `/bin` directories at their root. The stack works in tandem with a buildpack to support apps running in compartments. Under Diego architecture, cell VMs can support multiple stacks.

<p class="note">
Docker apps do not use stacks.</p>


## <a id='available-stacks'></a> Available stacks

<%= vars.product_short %> <%= vars.current_major_version ? "v#{vars.current_major_version}" : "" %> includes support for `cflinuxfs3`. The Linux `cflinuxfs3` stack is derived from Ubuntu Bionic 18.04. For more information about supported libraries, see the [GitHub stacks page](https://github.com/cloudfoundry/cflinuxfs3/blob/main/receipt.cflinuxfs3.x86_64).

<%= vars.custom_stack %>


## <a id='cli-commands'></a> Restaging apps on a new stack

For security, stacks receive regular updates to address Common Vulnerabilities and Exposures ([CVEs](http://www.ubuntu.com/usn/)). Apps pick up on these stack changes through new releases of <%= vars.product_short %>. However, if your app links statically to a library provided in the rootfs, you may have to manually restage it to pick up the changes.

It can be difficult to know what libraries an app statically links to, and it depends on the languages you are using. One example is an app that uses a Ruby or Python binary, and links out to part of the C standard library. If the C library requires an update, you may need to recompile the app and restage it.

To restage an app on a new stack, do the following:

1. Use the `cf stacks` command to list the stacks available in a deployment.

    <pre class="terminal">
    $ cf stacks
    Getting stacks in org MY-ORG / space development as developer@example<span>.</span>com...
    OK

    name            description
    cflinuxfs2      Cloud Foundry Linux-based filesystem - Ubuntu Trusty 14.04 LTS
    cflinuxfs3      Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS
    </pre>

1. To change your stack and restage your app, run the following command:

    ```
    cf push MY-APP -s STACK-NAME
    ```

    Where:
    - MY-APP is the name of the app.
    - STACK-NAME is the name of the new stack.

    For example, to restage your app on the stack `cflinuxfs3`, run `cf push MY-APP -s cflinuxfs3`:
        <pre class="terminal">
        $ cf push MY-APP -s cflinuxfs3
        Using stack cflinuxfs3...
        OK
        Creating app MY-APP in org MY-ORG / space development as developer@example<span>.</span>com...
        OK
        ...
        requested state: started
        instances: 1/1
        usage: 1G x 1 instances
        urls: MY-APP.cfapps.io
        last uploaded: Wed 17 Jul 22:57:04 UTC 2024
            state     since                  cpu    memory        disk           logging         cpu entitlement   details
        \#0  running   2024-07-17T22:57:22Z   0.3%   49.5M of 1G   130.2M of 1G   0B/s of 16K/s   2.4%
        </pre>


## <a id='stacks-api'></a> Stacks API

For API information, see the _Stacks_ section of the [Cloud Foundry API Documentation](http://apidocs.cloudfoundry.org).
