---
title: Delivering service credentials to an app
owner: Core Services
---



You will learn how to bind your apps to service instances for the purpose of generating credentials and delivering them to apps. For an overview of services, and documentation on other service management operations, see [Using Services](index.html). <%= vars.custom_services %>

## <a id='bind'></a>Bind a Service Instance ##

Binding a service instance to your app triggers credentials to be provisioned for the service instance and delivered to the app runtime in the [VCAP_SERVICES](../deploy-apps/environment-variable.html) environment variable. For details on consuming these credentials with your app, see [Using Bound Service Instances](#use).

Not all services support binding, as some services deliver value to users directly without integration with an app. In many cases binding credentials are unique to an app, and another app bound to the same service instance would receive different credentials; however this depends on the service.

<pre class="terminal">
$ cf bind-service my-app mydb
Binding service mydb to my-app in org my-org / space test as me@example.com...
OK
TIP: Use 'cf push' to ensure your env variable changes take effect

$ cf restart my-app
</pre>

<p class="note important">
You must restart or in some cases re-push your app for changes to be applied to the <a href="../deploy-apps/environment-variable.html">VCAP_SERVICES</a> environment variable and for the app to recognize these changes.</p>

### <a id='arbitrary-params-binding'></a> Arbitrary Parameters

Some services support additional configuration parameters with the bind request. These parameters are passed in a valid JSON object containing service-specific configuration parameters, provided either in-line or in a file. For a list of supported configuration parameters, see documentation for the particular service offering.

See the following examples:

<pre class="terminal">
$ cf bind-service rails-sample my-db -c '{"role":"read-only"}'

Binding service my-db to app rails-sample in org console / space development as user@example.com...
OK
</pre>

<pre class="terminal">
$ cf bind-service rails-sample my-db -c /tmp/config.json

Binding service my-db to app rails-sample in org console / space development as user@example.com... OK
</pre>

### <a id='bind-with-manifest'></a> Binding with App Manifest ###

As an alternative to binding a service instance after pushing an app, you can use the app manifest to bind the service instance during `cf push`.

The following excerpt from an app manifest binds a service instance called `test-mysql-01` to the app on push.

```
services:
 - test-mysql-01
```

The following excerpt from an app manifest binds a service instance called `db-test` with arbitrary parameters to the app on push.

<p class="note">
Arbitrary parameters are supported in app manifests in cf CLI v7.0 and later.</p>

```
services:
  - name: db-test
    parameters:
      schema: customschema
```

The following excerpt from the `cf push` command and response demonstrates that the cf CLI reads the manifest and binds the service instance to an app called `test-msg-app`.

<pre class="terminal">
$ cf push
Using manifest file /Users/Bob/test-apps/test-msg-app/manifest.yml

...

Binding service test-mysql-01 to test-msg-app in org My-Org / space development as Bob@<%=vars.app_domain%>
OK
</pre>

For more information about app manifests, see [Deploying with App Manifests](../deploy-apps/manifest.html#services-block).

### <a id='service-binding-names'></a>Named Service Bindings ###

Service offering and service instance names vary across environments. App authors can discover the service instances their apps require, without having to know environment-specific service names. Developers can specify a service binding name to be included in [VCAP_SERVICES](../deploy-apps/environment-variable.html).

To specify the service binding name, provide the `--binding-name` flag when binding an app to a service instance:
<pre class="terminal">
$ cf bind-service my-app my-service --binding-name postgres-database
OK
</pre>

The provided name will be available in the `name` and `binding_name` properties in the [VCAP_SERVICES](../deploy-apps/environment-variable.html) environment variable:

~~~
"VCAP_SERVICES": {
  "service-name": [
    {
      "name": "postgres-database",
      "binding_name": "postgres-database",
      ...
    }
  ]
}
~~~

### <a id='use'></a>Using Bound Service Instances ###

Once you have a service instance created and bound to your app, you need to configure the app to dynamically fetch the credentials for your service instance. The [VCAP_SERVICES](../deploy-apps/environment-variable.html#VCAP-SERVICES) environment variable contains credentials and additional metadata for all bound service instances. There are two methods developers can leverage to have their apps consume binding credentials.

* **Parse the JSON yourself:** See the documentation for [VCAP_SERVICES](../deploy-apps/environment-variable.html#VCAP-SERVICES). Helper libraries are available for some frameworks.
* **Auto-configuration:** Some buildpacks create a service connection for you by creating additional environment variables, updating config files, or passing system parameters to the JVM.

For details on consuming credentials specific to your development framework, refer to the Service Binding section in the documentation for [your framework's buildpack](../../buildpacks/index.html).

## <a id='update-credentials'></a>Update Service Credentials

This section describes how to update service instance credentials.
When updating the credentials, you can restage the app immediately and experience app downtime.
If your app uses blue-green deployment, you can update service instance credentials with no downtime.

For more information about user-provided services, see [Update a User-provided Service Instance](user-provided.html#update) in _User-Provided Service Instances_.

### <a id='update-credentials-with-downtime'></a>With Downtime

To update your service credentials:

  1. [Unbind the service instance](#unbind) using the credentials you are updating with the following command:

    <pre class="terminal">
    $ cf unbind-service YOUR-APP YOUR-SERVICE-INSTANCE
    </pre>

  1. [Bind the service instance](#bind) with the following command. This adds your credentials to the [VCAP_SERVICES](../deploy-apps/environment-variable.html) environment variable.

    <pre class="terminal">
    $ cf bind-service YOUR-APP YOUR-SERVICE-INSTANCE
    </pre>

  1. Restart or re-push the app bound to the service instance so that the app recognizes your environment variable updates.

### <a id='update-credentials-without-downtime'></a>Without Downtime

To update your service credentials without experiencing app downtime:

  1. Start a blue-green update of the app. For more information, see [Using Blue-Green Deployment to Reduce Downtime and Risk](../deploy-apps/blue-green.html). Push the "Green" version of the app with the `--no-start` parameter to prevent the app from starting right away:

    <pre class="terminal">
    $ cf push YOUR-APP --no-start
    </pre>

  1. Bind the service instances to the newly-deployed "Green" app with the following command:

    <pre class="terminal">
    $ cf bind-service YOUR-APP YOUR-SERVICE-INSTANCE
    </pre>

  1. Start the "Green" app with `cf start`:

    <pre class="terminal">
    $ cf start YOUR-APP
    </pre>

  1. Unbind the service instances from the `Blue` app:

    <pre class="terminal">
    $ cf unbind-service YOUR-APP YOUR-SERVICE-INSTANCE
    </pre>

## <a id='unbind'></a>Unbind a Service Instance ##

Unbinding a service removes the credentials created for your app from the [VCAP_SERVICES](../deploy-apps/environment-variable.html) environment variable.

<pre class="terminal">
$ cf unbind-service my-app mydb
Unbinding app my-app from service mydb in org my-org / space test as me@example.com...
OK
</pre>

<p class="note important">
You must restart or in some cases re-push your app for changes to be applied to the <a href="../deploy-apps/environment-variable.html">VCAP_SERVICES</a> environment variable and for the app to recognize these changes.</p>
