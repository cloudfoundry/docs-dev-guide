---
title: Provisioning and integrating service instances
owner: Services API
---

You can provision service instances and integrate them with apps that you pushed to Cloud Foundry. <%= vars.custom_services %>


## <a id='instances'></a> Services and service instances

Cloud Foundry offers a Marketplace of services, from which users can provision reserved resources on-demand. Examples of resources services provide include databases on a shared or dedicated server, or accounts on a SaaS app. These resources are known as service instances and the systems that deliver and operate these resources are known as Services. Think of a service as a factory that delivers service instances.

For more information about provisioning service instances and other life cycle operations, see [Managing service instances](./managing-services.html).

<p class="note">
For a service to be available in the Marketplace, it must be integrated with Cloud Foundry by way of APIs. <%= vars.custom_services %></p>

### <a id='user-provided-services'></a> User-provided service instances

Cloud Foundry allows developers to use services that are not available in the Marketplace using user-provided service instances (UPSI). For more information, see [User-provided service instances](./user-provided.html)


## <a id='credentials'></a> Service instance credentials

Cloud Foundry allows users to provision credentials needed to interface with a service instance. You can use app binding to deliver these credentials to your Cloud Foundry app. For external and local clients, you can use service keys to generate credentials to communicate directly with a service instance.

### <a id='application-binding'></a> App binding

Service instance credentials can be delivered to apps running on Cloud Foundry in an environment variable. For more information, see [Delivering service credentials to an app](./application-binding.html).

For information about binding to a specific app development framework, see [Using Classic Buildpacks in Cloud Foundry](../../buildpacks/using-buildpacks.html).

### <a id='service-keys'></a> Service keys

Credentials managed manually are known as service keys. Use service keys when you want a set of credentials for use by clients other than the app in the same space. For example, you can use service keys to connect to a service instance from a local client, or from an app in another space, or even from outside of Cloud Foundry.

For more information about creating a user-provided service instance with service keys, see [User-provided service instances](./user-provided.html). For more information about service keys, see [Managing service keys](./service-keys.html).

<p class="note important">
Not all services support service keys. Some services support credentials through app binding only.</p>


## <a id='external-ip'></a> Outbound IP addresses

To allow an app to communicate with a service external to <%= vars.product_short %>, you might need to configure the service to accept connections from your app based on its outbound IP address.

In your external service configuration, you must do one of the following:

* Add the entire IP range for the Diego Cell where the app is deployed to your allowlist.
* Derive the app IP address from its DNS name using a command-line tool such as `dig`, `host`, or `nslookup`. In your external service configuration, add the IP address or range of the app instance to your allowlist.


## <a id='log-management'></a> Stream app logs to log management services

To learn how your app logs can be streamed to third-party log management services, see [Streaming app logs to log management services](./log-management.html).

User-provided service instances can be used to drain app logs to a service not available in the Marketplace. This is also known as setting up a syslog drain. For guidance on configuring some third-party log management services, see [Service-specific instructions for streaming app logs](./log-management-thirdparty-svc.html).


## <a id='route-services'></a> Manage app requests with route services

To learn how Marketplace services (and user-provided service instances) can be used to perform preprocessing on app requests, see [Managing app requests with route services](./route-binding.html).


## <a id='migrating'></a> Migrate a database schema

If your app relies on a relational database, you must apply schema changes periodically. To perform database schema migrations on Cloud Foundry-managed services, run a database migration task with the Cloud Foundry Command Line Interface (cf CLI) tool.

For more information about running cf CLI tasks, see [Running tasks in your apps](../using-tasks.html).

<p class="note important">
To run tasks with the cf CLI, you must install cf CLI v6.23.0 or later. The current supported version is cf CLI v8. For information about downloading, installing, and uninstalling the cf CLI, see the <a href="../../operating/cf-cli/install-cf-cli.html">Installing the cf CLI</a>.</p>

To do a database schema migration with cf CLI:

1. Push the app:
	<pre class="terminal">$ cf push APP-NAME</pre>

	Where `APP-NAME` is the name of the app.

	<p class="note">
	To run a task without starting the app, push the app with <code>cf push -i 0</code> and then run the task. You can run the app later by scaling up its instance count.</p>

1. Do a database schema migration as a task on the app:
	<pre class="terminal">
	$ cf run-task APP-NAME --command "bin/rails db:migrate" --name TASK-NAME
	Creating task for app APP-NAME in org jdoe-org / space development as jdoe@pivotal.io...
	OK
	Task 1 has been submitted successfully for execution.
	</pre>

	Where:
	- `APP-NAME` is the name of the app.
	- `TASK-NAME` is the name of the task.
