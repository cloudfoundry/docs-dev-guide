---
title: Streaming app logs to Azure OMS Log Analytics
owner: Logging and Metrics
---

Here are instructions for integrating your <%= vars.app_runtime_first %> apps with OMS Log Analytics in the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/log-analytics/).

Operations Management Suite (OMS) Log Analytics is a monitoring service for Microsoft Azure. The OMS Log Analytics Firehose Nozzle is a <%= vars.app_runtime_abbr %> component that forwards metrics from the Loggregator Firehose to OMS Log Analytics.

This topic assumes you are using the latest version of the Tanzu cf CLI and a working <%= vars.app_runtime_abbr %> deployment on Azure.


## <a id='config'></a> Step 1: Create an OMS workspace in Azure

To create an OMS workspace, see the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-get-started) in the Microsoft Azure documentation.


## <a id='deploy'></a> Step 2: Deploy the nozzle to <%= vars.app_runtime_abbr %>

To deploy the OMS Log Analytics Firehose nozzle to <%= vars.app_runtime_abbr %>:

1. Authenticate to your <%= vars.app_runtime_abbr %> instance. <%= vars.uaa_cli %> Run:

    ```
    cf login -a https://api.YOUR-DOMAIN -u YOUR-USERNAME --skip-ssl-validation
    ```

    Where:
    <ul>
      <li><code>YOUR-DOMAIN</code> is your domain.</li>
      <li><code>YOUR-USERNAME</code> is your <%= vars.app_runtime_abbr %> user name.</li>
    </ul>

1. To create a new <%= vars.app_runtime_abbr %> user and grant it access to the Loggregator Firehose using the Tanzu UAA CLI (UAAC):
    1. Target your Tanzu UAA server by running:

        ```
        uaac target uaa.YOUR-DOMAIN --skip-ssl-validation
        ```
        Where `YOUR-DOMAIN` is your domain.
    1. Obtain an access token for the admin client by running:

        ```
        uaac token client get admin
        ```
    1. Create a new user by running:

        ```
        uaac user add USERNAME -p PASSWORD  --email EMAIL
        ```
        Where:
        <ul>
          <li><code>USERNAME</code> is a new user name.</li>
          <li><code>PASSWORD</code> is a password.</li>
          <li><code>EMAIL</code> is an email address.</li>
        </ul>

    1. Grant the new user admin permissions by running:

        ```
        uaac member add cloud_controller.admin USERNAME
        ```
        Where `USERNAME` is the user name you set in an earlier step.
    1. Grant the new user permission to read logs from the Loggregator Firehose endpoint by running:

        ```
        uaac member add doppler.firehose USERNAME
        ```
        Where `USERNAME` is the user name you set.

1. Download the [OMS Log Analytics Firehose Nozzle BOSH release](https://github.com/Azure/oms-log-analytics-firehose-nozzle) from GitHub. Clone the repository and navigate to the `oms-log-analytics-firehose-nozzle` directory by running:

    ```
    git clone https://github.com/Azure/oms-log-analytics-firehose-nozzle.git
    cd oms-log-analytics-firehose-nozzle
    ```

2. Set the environment variables in the [OMS Log Analytics Firehose Nozzle manifest](https://github.com/Azure/oms-log-analytics-firehose-nozzle/blob/master/manifest.yml):

    <table class="table'">
      <thead><tr>
        <th>Environment variable</th>
        <th>Description</th>
      </tr></thead>
      <tr>
    <td>
      <pre class="terminal">
      applications:
      - name: oms_nozzle
      ...
      env:
        OMS_WORKSPACE: YOUR-WORKSPACE-ID
        OMS_KEY: YOUR-OMS-KEY
      </pre>
    </td>
    <td>Enter the ID and key value for your OMS workspace.</td>
      </tr>
      <tr>
        <td><code>OMS_POST_TIMEOUT: 10s</code></td>
        <td>(Optional) Set the HTTP post timeout for sending events to OMS LogmAnalytics. The default value is 10 seconds.</td>
      </tr>
      <tr>
        <td><code>OMS_BATCH_TIME: 10s</code></td>
        <td>(Optional) Set the interval for posting a batch to OMS. The default value is 10 seconds.
        <br><br>
        For more information, see <a href="#events">Configure Additional Logging</a>.</td>
      </tr>
      <tr>
        <td><code>OMS_MAX_MSG_NUM_PER_BATCH: 1000</code></td>
        <td>(Optional) Set the maximum number of messages to include in an OMS batch. The default amount is 1000.
        <br><br>
        For more information, see <a href="#events">Configure Additional Logging</a>.</td>
      </tr>
      <tr>
    <td>
      <pre class="terminal">
      FIREHOSE_USER: YOUR-FIREHOSE-USER
      FIREHOSE_USER_PASSWORD: YOUR-FIREHOSE-PASSWORD
      </pre>
    </td>
    <td>Enter the user name and password for the Firehose user you created in Step 2c.</td>
      </tr>
      <tr>
        <td><code>API_ADDR: https://api.YOUR-DOMAIN</code></td>
        <td>Enter the URL of your API endpoint.</td>
      </tr>
      <tr>
        <td><code>DOPPLER_ADDR: wss://doppler.YOUR-DOMAIN:443</code></td>
        <td>Enter the URL of your Loggregator Traffic Controller endpoint.</td>
      </tr>
      <tr>
        <td><code>EVENT_FILTER: YOUR-LIST</code></td>
        <td>(Optional) Enter the event types you want to filter out in a comma-separated list. The valid event types are <code>METRIC</code>, <code>LOG</code>, and <code>HTTP</code>.</td>
      </tr>
      <tr>
        <td><code>IDLE_TIMEOUT: 60s</code></td>
        <td>(Optional) Set the duration for the Firehose keep-alive connection. The default time is 60 seconds.</td>
      </tr>
      <tr>
        <td><code>SKIP_SSL_VALIDATION: TRUE-OR-FALSE</code></td>
        <td>Set this value to <code>TRUE</code> to allow insecure connections to the Tanzu UAA and the Traffic Controller. To block insecure connections to the Tanzu UAA and Traffic Controller, set this value to <code>FALSE</code>.</td>
      </tr>
      <tr>
        <td><code>LOG_LEVEL: INFO</code></td>
        <td>(Optional) Change this value to increase or decrease the amount of logs. Valid log levels in increasing order include <code>INFO</code>, <code>ERROR</code>, and <code>DEBUG</code>. The default value is <code>INFO</code>.</td>
      </tr>
      <tr>
        <td><code>LOG_EVENT_COUNT: TRUE-OR-FALSE</code></td>
        <td>Set this value to <code>TRUE</code> to log the total count of events that the nozzle has sent, received, and lost. OMS logs this value as <code>CounterEvents</code>.
        <br><br>
        For more information, see <a href="#events">Configure Additional Logging</a>.</td>
      </tr>
      <tr>
        <td><code>LOG_EVENT_COUNT_INTERVAL: 60s</code></td>
        <td>(Optional) Set the time interval for logging the event count to OMS. The default interval is 60 seconds.
        <br><br>
        For more information, see <a href="#events">Configure Additional Logging</a>.</td>
      </tr>
    </table>

3. Push the app by running:

    ```
    cf push
    ```


## <a id='oms-portal'></a> Step 3: View logs in OMS Portal

Import the <%= vars.app_runtime_abbr %> OMS view to your OMS Portal to view visualized logs and metrics. You can also create alert rules for specific events.

The OMS view of <%= vars.app_runtime_abbr %> is not available in the OMS Solutions Gallery. You can add it manually to view your logs in OMS Portal.

### <a id='import-view'></a> Import the OMS view

To import the OMS view:

1. From the main OMS Overview page, go to **View Designer**.

1. Click **Import**.

1. Click **Browse**.

1. Select the **Cloud Foundry (Preview).omsview** file.

1. Save the view. The main OMS Overview page displays the **Tile**.

1. Click the **Tile** to view visualized metrics.

For more information, see the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-view-designer) in the Azure documentation.

### <a id='alert'></a> Create alert rules

For more information about OMS Log Analytics alerts, see the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-alerts) in the Azure documentation.

### <a id='queries'></a> Set alert queries

This section includes example queries that operators can set in the OMS Portal.

* This query alerts the operator when the nozzle sends a `slowConsumerAlert` to OMS:

    ```
    Type=CF_ValueMetric_CL Name_s=slowConsumerAlert
    ```

* This query alerts the operator when Loggregator sends an `LGR` to indicate problems with logging:

    ```
    Type=CF_LogMessage_CL SourceType_s=LGR MessageType_s=ERR
    ```

* This query alerts the operator when the number of lost events reaches a certain threshold, specified in the OMS Portal:

    ```
    Type=CF_CounterEvent_CL Job_s=nozzle Name_s=eventsLost
    ```

* This query alerts the operator when the nozzle receives the `TruncatingBuffer.DroppedMessages` **CounterEvent**:

    ```
    Type=CF_CounterEvent_CL Name_s="TruncatingBuffer.DroppedMessages"
    ```


## <a id='additional-logging'></a> Step 4: Configure additional logging (optional)

OMS Log Analytics Firehose Nozzle forwards metrics from the Loggregator Firehose to OMS with minimal processing, but the nozzle can push additional metrics to OMS.

### <a id='events'></a> Logs sent and received, events lost

If you set the `LOG_EVENT_COUNT` environment variable to `TRUE` in the [manifest](#deploy), the nozzle periodically sends the count of sent, received, and lost events to OMS. The value you set for the `LOG_EVENT_COUNT_INTERVAL` specifies how frequently the nozzle sends the count.

The nozzle does not count CounterEvents in the sent, received, or lost event count.

The nozzle sends the count as a **CounterEvent** with one of these values for **CounterKey**:

| CounterEvent | CounterKey |
| ------------ | ---------- |
| nozzle.stats.eventsReceived | The number of events the Firehose has received during the interval |
| nozzle.stats.eventsSent | The number of events the nozzle has sent to OMS during the interval |
| nozzle.stats.eventsLost | The number of events the nozzle has tried to send to OMS during the interval, but failed to send after 4 attempts |

In most cases, the total count of `eventsSent` plus `eventsLost` is less than the total `eventsReceived` at the same time. The nozzle buffers some messages and posts them in a batch to OMS. Operators can adjust the buffer size by adjusting the `OMS_BATCH_TIME` and `OMS_MAX_MSG_NUM_PER_BATCH` environment variables in the manifest.

### <a id='slow-consumer'></a> Log slow consumer alerts

Loggregator sends the nozzle a `slowConsumerAlert` when:

* WebSocket sends the error code `ClosePolicyViolation (1008)`.

* The nozzle receives a **CounterEvent** with the value `TruncatingBuffer.DroppedMessages`.

In either case, the nozzle sends the `slowConsumerAlert` event to OMS as the following **ValueMetric**:

| ValueMetric | MetricKey |
| ----------- | --------- |
| nozzle.alert.slowConsumerAlert | 1 |

The nozzle does not count ValueMetrics in the sent, received, or lost event count.

<%= vars.slow_nozzle_alerts_link %>


## <a id='scaling'></a> Step 5: Scale the deployment (optional)

### <a id='scale-nozzle'></a> Scale the nozzle

If the nozzle is unable to keep up with processing logs from the Firehose, Loggregator alerts the nozzle. When the nozzle receives the alert, it sends a `slowConsumerAlert` to OMS. If this happens, scaling up the nozzle minimizes data loss.

If an operator scales up their deployment, the Firehose evenly distributes events across all instances of the nozzle. <%= vars.scaling_nozzles_link %>

Operators can create an alert rule for the `slowConsumerAlert` message. For more information, see [Create alert rules](#alert).

### <a id='scale-loggregator'></a> Scale Loggregator

Loggregator sends `LGR` log entries to indicate problems with logging. <%= vars.scaling_loggregator_link %>

Operators can create an alert rule for the `LGR` message. For more information, see [Create alert rules](#alert).
